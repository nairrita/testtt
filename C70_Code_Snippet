#### App.js



import React from 'react';

import {Text,View,StyleSheet,Image} from 'react-native';

import {createBottomTabNavigator} from 'react-navigation-tabs';

import {createAppContainer} from 'react-navigation';



import TransactionScreen from './screens/BookTransactionScreen';

import SearchScreen from './screens/SearchScreen';





export default class App extends React.Component{

  render(){

​    return(

<AppContainer/>

​    )

  }

}



const TabNavigator = createBottomTabNavigator({

  Transaction:{screen:TransactionScreen},

  Search:{screen : SearchScreen},

},



{



defaultNavigationOptions:({navigation})=>({

  tabBarIcon:({})=>{

​    const routeName = navigation.state.routeName

​    if(routeName=== 'Transaction'){

​      return(

​        <Image

​        source = {require ('./assets/book.png')}

​        style = {{width:40,height:40}}

​        />

​      )

​    }

​    else if (routeName === 'Search'){

​      return(

​        <Image

​        source = {require('./assets/searchingbook.png')}

​        style = {{width: 40, height : 40}}

​        />

​      )

​    }

  }

})





}





)



const AppContainer = createAppContainer(TabNavigator)







##### BookTransactionScreen

import React from 'react';

import {Text,View,StyleSheet,TextInput,Image,TouchableOpacity} from 'react-native';

import * as Permissions from 'expo-permissions';

import {BarCodeScanner} from 'expo-barcode-scanner';



export default class TransactionScreen extends React.Component{



​    constructor(){

​        super()

​        this.state = {

​            hasCameraPermissions : null,

​            scanned : false,

​            scannedBookId : '',

​            scannedStudentId : '',

​            buttonState : 'normal'

​        }

​    }





​    getCameraPermissions= async(id)=>{

​        const {status} = await  Permissions.askAsync(Permissions.CAMERA);

​        this.setState({

​            hasCameraPermissions: status === 'granted',

​            buttonState : id,

​            scanned : false

​        })

​    }



​    handleBarCodeScanned = async({type,data})=>{

  const {buttonState} = this.state

  if(buttonState === "BookId"){



​        this.setState({

​            scanned : true,

​            scannedBookId: data,

​            buttonState: 'normal'

​        });

​    }



​    else if(buttonState=== "StudentId"){

​        this.setState({

​            scanned : true,

​            scannedStudentId: data,

​            buttonState: 'normal'

​        });

​    }



​    }

​    render(){

​     const hasCameraPermissions = this.state.hasCameraPermissions;

​     const scanned = this.state.scanned;

​     const buttonState =  this.state.buttonState;

​     if(buttonState !== 'normal' && hasCameraPermissions){

​         return(

​             <BarCodeScanner

​             onBarCodeScanned = {scanned? undefined:this.handleBarCodeScanned}

​             style = {StyleSheet.absoluteFillObject}

​             

​             />

​         )

​     }

​     else if(buttonState === 'normal'){

​        return(



​            <View style = {styles.container}>

​                <View>

​                    <Image   

​                    

​                    source = {require("../assets/booklogo.jpg")}

​                    style = {{width:200,height:200}} />

​                    <Text style = {{textAlign: 'center', fontSize:30}}WILY></Text>

​                </View>

<View style = {styles.inputView}>

​    <TextInput

​    style = {styles.inputBox}

​    placeholder = "Book Id" 

​    value = {this.state.scannedBookId}/>

​             <TouchableOpacity style = {styles.scanButton}

​             onPress={()=>{

​                 this.getCameraPermissions("BookId")

​             }}>

​                 <Text style = {styles.buttonText}>SCAN </Text>

​             </TouchableOpacity>

​            </View>

​            <View style = {styles.inputView}>

​            <TextInput

​            style = {styles.inputBox}

​            placeholder = "Student Id"

​            value = {this.state.scannedStudentId}/>

​            <TouchableOpacity style = {styles.scanButton}

​            onPress = {()=>{

​                this.getCameraPermissions("StudentId")

​            }}>

​                <Text style = {styles.buttonText}>Scan</Text>

​            </TouchableOpacity>

​            </View>

​            </View>

​        )

​    }

}

}



const styles = StyleSheet.create({



​    container:{

​     

​        flex:1,

​        justifyContent:'center',

​        alignItems:'center'

​    },



​    displayText :{

​        textAlign: 'center',

​        marginTop : 200,

​        fontSize: 20



​    },

​    scanButton:{

​        backgroundColor: 'blue',

​        width:50,

​        borderWidth : 1.5,

​        borderLeftWidth:0,

​       

​        

​    },

​    buttonText:{

​        fontSize: 15,

​        textAlign: 'center',

​        marginTop: 20

​    },



​    inputView:{

​        flexDirection: 'row',

​        margin:20

​    },

​    inputBox:{

​        width:200,

​        height:40,

​        borderWidth: 1.5,

​        borderRightWidth:0,

​        fontSize:20

​    }











})